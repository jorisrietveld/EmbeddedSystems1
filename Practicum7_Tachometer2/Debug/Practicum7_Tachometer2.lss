
Practicum7_Tachometer2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000156  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00000156  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080007c  0080007c  00000206  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000741  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000624  00000000  00000000  000009f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000365  00000000  00000000  00001019  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001380  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ce  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000142  00000000  00000000  000017e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00001924  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  8a:	0c 94 a9 00 	jmp	0x152	; 0x152 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_11>:
        for ( int i = 0; i<7; ++i ) { // Load 7 single segment values for an certain number into the screen buffer.
            screenBuffer[screenBufferIndex][i] = 0xff;
        }
        screenBufferIndex--;
    }
}
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
  a2:	ef 93       	push	r30
  a4:	ff 93       	push	r31
  a6:	8d e7       	ldi	r24, 0x7D	; 125
  a8:	82 bf       	out	0x32, r24	; 50
  aa:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
  ae:	86 30       	cpi	r24, 0x06	; 6
  b0:	71 f4       	brne	.+28     	; 0xce <__vector_11+0x3c>
  b2:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__data_end>
  b6:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <screenBufferIndex>
  ba:	83 30       	cpi	r24, 0x03	; 3
  bc:	30 f4       	brcc	.+12     	; 0xca <__vector_11+0x38>
  be:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <screenBufferIndex>
  c2:	8f 5f       	subi	r24, 0xFF	; 255
  c4:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <screenBufferIndex>
  c8:	02 c0       	rjmp	.+4      	; 0xce <__vector_11+0x3c>
  ca:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <screenBufferIndex>
  ce:	20 91 7d 00 	lds	r18, 0x007D	; 0x80007d <screenBufferIndex>
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <__vector_11+0x4a>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	2a 95       	dec	r18
  de:	e2 f7       	brpl	.-8      	; 0xd8 <__vector_11+0x46>
  e0:	80 95       	com	r24
  e2:	8b bb       	out	0x1b, r24	; 27
  e4:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <screenBufferIndex>
  e8:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
  ec:	97 e0       	ldi	r25, 0x07	; 7
  ee:	e9 9f       	mul	r30, r25
  f0:	f0 01       	movw	r30, r0
  f2:	11 24       	eor	r1, r1
  f4:	e0 5a       	subi	r30, 0xA0	; 160
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	e8 0f       	add	r30, r24
  fa:	f1 1d       	adc	r31, r1
  fc:	80 81       	ld	r24, Z
  fe:	85 bb       	out	0x15, r24	; 21
 100:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 104:	8f 5f       	subi	r24, 0xFF	; 255
 106:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
 10a:	ff 91       	pop	r31
 10c:	ef 91       	pop	r30
 10e:	9f 91       	pop	r25
 110:	8f 91       	pop	r24
 112:	2f 91       	pop	r18
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <initiateIO>:

void initiateIO()
{
	DISPLAY_DATA_DIR = 0xFF; // Configure all display ports as outputs.
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	8a bb       	out	0x1a, r24	; 26
	DISPLAY_OUTPUT_PORT = 0xFF; // Pull up every segment so they turn off.
 122:	8b bb       	out	0x1b, r24	; 27
	SEGMENT_DATA_DIR = 0xFF; // Configure all segment ports as outputs.
 124:	84 bb       	out	0x14, r24	; 20
	SEGMENT_OUTPUT_PORT = 0xFF; // Pull up every segment so they turn off.
 126:	85 bb       	out	0x15, r24	; 21
 128:	08 95       	ret

0000012a <initiateRegisters>:
	//CONTROL_INPUT_PIN = (1<<4) | (1<<5) | (1<<6) | (1<<7); // Enable pull up resistors on the user input ports.
}

void initiateRegisters()
{
	MCUCR = ( 1<<ISC00 );   // Enable interrupt reaction
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	85 bf       	out	0x35, r24	; 53
	TCCR0 = (1 << CS01); // Set up timer 0 with prescaler 8, 0.125 tick = 1 us
 12e:	92 e0       	ldi	r25, 0x02	; 2
 130:	93 bf       	out	0x33, r25	; 51
	TCNT0 = 125; // Initialize timer 0 tick counter to 125, update every ms.
 132:	9d e7       	ldi	r25, 0x7D	; 125
 134:	92 bf       	out	0x32, r25	; 50
	// TIMSK Timer Interrupt mask, TOIE0 Timer Overflow Interrupt Enable 0
	TIMSK = ( 1<< TOIE0); // Enable interrupts on an overflow of the Timer 0 register.
 136:	89 bf       	out	0x39, r24	; 57
	sei(); // Enable global interrupts.
 138:	78 94       	sei
 13a:	08 95       	ret

0000013c <main>:
}

int main()
{
    initiateIO();
 13c:	0e 94 8f 00 	call	0x11e	; 0x11e <initiateIO>
	initiateRegisters();
 140:	0e 94 95 00 	call	0x12a	; 0x12a <initiateRegisters>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	83 ec       	ldi	r24, 0xC3	; 195
 146:	99 e0       	ldi	r25, 0x09	; 9
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <main+0xc>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0x12>
 14e:	00 00       	nop
 150:	f9 cf       	rjmp	.-14     	; 0x144 <main+0x8>

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
