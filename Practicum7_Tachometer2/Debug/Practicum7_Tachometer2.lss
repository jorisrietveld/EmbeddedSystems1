
Practicum7_Tachometer2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000015c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005a5  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000527  00000000  00000000  00000795  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000224  00000000  00000000  00000cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00000ee0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002fa  00000000  00000000  00000f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  0000121e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000125a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  74:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_7>:

volatile uint8_t count = 0;

// Interrupt Service Routine on Timer 1: compare output compare register A with: Timer 1: Count register
ISR(TIMER1_COMPA_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
    count++;
  88:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  8c:	8f 5f       	subi	r24, 0xFF	; 255
  8e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
    switch (count){
  92:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  96:	87 30       	cpi	r24, 0x07	; 7
  98:	29 f4       	brne	.+10     	; 0xa4 <__vector_7+0x28>
        case 7:
            count = 0;
  9a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
            LED_PORT = 0xfe;
  9e:	8e ef       	ldi	r24, 0xFE	; 254
  a0:	82 bb       	out	0x12, r24	; 18
            break;
  a2:	03 c0       	rjmp	.+6      	; 0xaa <__vector_7+0x2e>
        default:
            LED_PORT >>= 1;
  a4:	82 b3       	in	r24, 0x12	; 18
  a6:	86 95       	lsr	r24
  a8:	82 bb       	out	0x12, r24	; 18
            break;
    }
    LED_PORT ^= (1<<7); // Toggle led
  aa:	82 b3       	in	r24, 0x12	; 18
  ac:	80 58       	subi	r24, 0x80	; 128
  ae:	82 bb       	out	0x12, r24	; 18
}
  b0:	8f 91       	pop	r24
  b2:	0f 90       	pop	r0
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	0f 90       	pop	r0
  b8:	1f 90       	pop	r1
  ba:	18 95       	reti

000000bc <main>:

int main(){
    LED_DATA_DIRECTION = 0xff; // Enable the data direction register of of the led port to outputs and pull up all ports.
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	81 bb       	out	0x11, r24	; 17
    LED_PORT = 0xfe;
  c0:	8e ef       	ldi	r24, 0xFE	; 254
  c2:	82 bb       	out	0x12, r24	; 18
    TCCR1B |= (1 << WGM12 ); // Configure timer 1 for CTC mode, Clear Timer on Compare.
  c4:	8e b5       	in	r24, 0x2e	; 46
  c6:	88 60       	ori	r24, 0x08	; 8
  c8:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << OCIE1A ); // Enable interrupts on register OCR1A with Timer 1, Output Compare Interrupt Enable 1 A 
  ca:	89 b7       	in	r24, 0x39	; 57
  cc:	80 61       	ori	r24, 0x10	; 16
  ce:	89 bf       	out	0x39, r24	; 57
	sei(); // Set Enable Interupts, Enable global interrupts.
  d0:	78 94       	sei
	OCR1A = 15624; // Set CTC compare value to 1Hz at 1MHz AVR clock, with a prescaler of 64,
  d2:	88 e0       	ldi	r24, 0x08	; 8
  d4:	9d e3       	ldi	r25, 0x3D	; 61
  d6:	9b bd       	out	0x2b, r25	; 43
  d8:	8a bd       	out	0x2a, r24	; 42
    TCCR1B |= (1 << CS10) | (1<<CS11); // Enable Timer1 with an prescaler of 64
  da:	8e b5       	in	r24, 0x2e	; 46
  dc:	83 60       	ori	r24, 0x03	; 3
  de:	8e bd       	out	0x2e, r24	; 46

    while(1){
        asm volatile ("nop"); // Do nothing , No Operation
  e0:	00 00       	nop
  e2:	fe cf       	rjmp	.-4      	; 0xe0 <main+0x24>

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
