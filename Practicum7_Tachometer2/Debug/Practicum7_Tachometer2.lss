
Practicum7_Tachometer2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000346  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  00000346  000003da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  008000c2  008000c2  0000043c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000046c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007ad  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005e2  00000000  00000000  00000cad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000375  00000000  00000000  0000128f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00001604  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000451  00000000  00000000  000016e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c0  00000000  00000000  00001b35  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00001cf5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e4       	ldi	r30, 0x46	; 70
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3c       	cpi	r26, 0xC2	; 194
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 ec       	ldi	r26, 0xC2	; 194
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 3c       	cpi	r26, 0xCB	; 203
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 67 01 	call	0x2ce	; 0x2ce <main>
  8a:	0c 94 a1 01 	jmp	0x342	; 0x342 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_11>:
            uint16_t revolutionsPerMinute = microSecondsBetweenPulse * 60000000; // Calculate revolutions per minute
        }
    }
}

ISR(TIMER0_OVF_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
  a2:	ef 93       	push	r30
  a4:	ff 93       	push	r31
    TCNT0 = 182;
  a6:	86 eb       	ldi	r24, 0xB6	; 182
  a8:	82 bf       	out	0x32, r24	; 50
    SEGMENT_PORT = 0xff;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	85 bb       	out	0x15, r24	; 21
    if( segmentBufferIndex == 6 ){ // Is this the last segment in the buffer.
  ae:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__data_end>
  b2:	86 30       	cpi	r24, 0x06	; 6
  b4:	71 f4       	brne	.+28     	; 0xd2 <__vector_11+0x40>
        segmentBufferIndex = 0; // Start from the first index.
  b6:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <__data_end>
        if( screenBufferIndex < 3 ){
  ba:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <screenBufferIndex>
  be:	83 30       	cpi	r24, 0x03	; 3
  c0:	30 f4       	brcc	.+12     	; 0xce <__vector_11+0x3c>
            screenBufferIndex++; // Go the the next screen buffer.
  c2:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <screenBufferIndex>
  c6:	8f 5f       	subi	r24, 0xFF	; 255
  c8:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <screenBufferIndex>
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <__vector_11+0x40>
        }else{
            screenBufferIndex = 0;
  ce:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <screenBufferIndex>
        }
    }
    DISPLAY_PORT = ~(1<<screenBufferIndex); // Enable current display
  d2:	20 91 c3 00 	lds	r18, 0x00C3	; 0x8000c3 <screenBufferIndex>
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <__vector_11+0x4e>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	2a 95       	dec	r18
  e2:	e2 f7       	brpl	.-8      	; 0xdc <__vector_11+0x4a>
  e4:	80 95       	com	r24
  e6:	8b bb       	out	0x1b, r24	; 27
    SEGMENT_PORT = screenBuffer[screenBufferIndex][segmentBufferIndex++]; // Enable current segment
  e8:	e0 91 c3 00 	lds	r30, 0x00C3	; 0x8000c3 <screenBufferIndex>
  ec:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__data_end>
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	98 0f       	add	r25, r24
  f4:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__data_end>
  f8:	97 e0       	ldi	r25, 0x07	; 7
  fa:	e9 9f       	mul	r30, r25
  fc:	f0 01       	movw	r30, r0
  fe:	11 24       	eor	r1, r1
 100:	ea 55       	subi	r30, 0x5A	; 90
 102:	ff 4f       	sbci	r31, 0xFF	; 255
 104:	e8 0f       	add	r30, r24
 106:	f1 1d       	adc	r31, r1
 108:	80 81       	ld	r24, Z
 10a:	85 bb       	out	0x15, r24	; 21
}
 10c:	ff 91       	pop	r31
 10e:	ef 91       	pop	r30
 110:	9f 91       	pop	r25
 112:	8f 91       	pop	r24
 114:	2f 91       	pop	r18
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <__vector_9>:

ISR(TIMER1_OVF_vect){
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	8f 93       	push	r24
 12c:	9f 93       	push	r25
    timerOverflowCount++;     // Increment overflow counter.
 12e:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <timerOverflowCount>
 132:	90 91 ca 00 	lds	r25, 0x00CA	; 0x8000ca <timerOverflowCount+0x1>
 136:	01 96       	adiw	r24, 0x01	; 1
 138:	90 93 ca 00 	sts	0x00CA, r25	; 0x8000ca <timerOverflowCount+0x1>
 13c:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <timerOverflowCount>
}
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <__vector_1>:

ISR(INT0_vect){
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	8f 93       	push	r24
 15a:	9f 93       	push	r25
    lastPulseMicrosecondsCount = TCNT1; // Save current amount of microseconds.
 15c:	8c b5       	in	r24, 0x2c	; 44
 15e:	9d b5       	in	r25, 0x2d	; 45
 160:	90 93 c8 00 	sts	0x00C8, r25	; 0x8000c8 <lastPulseMicrosecondsCount+0x1>
 164:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <lastPulseMicrosecondsCount>
    lastPulseOverflowCount = timerOverflowCount; // Save current amount of overflows.
 168:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <timerOverflowCount>
 16c:	90 91 ca 00 	lds	r25, 0x00CA	; 0x8000ca <timerOverflowCount+0x1>
 170:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <lastPulseOverflowCount>
}
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <initIoRegisters>:

void initIoRegisters(){
    DISPLAY_DATA_DIR = SEGMENT_DATA_DIR = 0xFF; // Initiate data output I/O registers.
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	84 bb       	out	0x14, r24	; 20
 186:	8a bb       	out	0x1a, r24	; 26
    INPUT_DATA_DIR = 0x0F; // Initiate data input I/O registers.
 188:	9f e0       	ldi	r25, 0x0F	; 15
 18a:	91 bb       	out	0x11, r25	; 17

    DISPLAY_PORT = 0xFF;
 18c:	8b bb       	out	0x1b, r24	; 27
	SEGMENT_PORT = 0xFF; // Turn of all segment leds.
 18e:	85 bb       	out	0x15, r24	; 21
    INPUT_DATA_DIR = 0x0F; // Enable pull-up resistors on the external input ports.
 190:	91 bb       	out	0x11, r25	; 17
 192:	08 95       	ret

00000194 <initiateTimers>:
}

void initiateTimers(){
    TCCR0 = 1 << CS01; // Initiate Timer 0 for multiplexing the segment displays.
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	83 bf       	out	0x33, r24	; 51
    TCNT0 = 182; // Initiate counter register of Timer 0.
 198:	86 eb       	ldi	r24, 0xB6	; 182
 19a:	82 bf       	out	0x32, r24	; 50
    TCCR1B = 1 << CS10; // Initiate Timer 1 for tracking time between external inputs.
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	8e bd       	out	0x2e, r24	; 46
    TCNT1 = 0; // Initiate counter register of Timer 0.
 1a0:	1d bc       	out	0x2d, r1	; 45
 1a2:	1c bc       	out	0x2c, r1	; 44
 1a4:	08 95       	ret

000001a6 <initInterrupts>:
}

void initInterrupts(){
    MCUCR = ( 1<<ISC00 ); // Configure Interrupt mode to respond to falling edges.
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	85 bf       	out	0x35, r24	; 53
    TIMSK = 1<< TOIE0 | 1 << TOIE1;// Enable overflow interrupt on Timer 0 and Timer 1
 1aa:	85 e0       	ldi	r24, 0x05	; 5
 1ac:	89 bf       	out	0x39, r24	; 57
    GICR = 1 << INT0; // Enable external interrupts on port D3.
 1ae:	80 e4       	ldi	r24, 0x40	; 64
 1b0:	8b bf       	out	0x3b, r24	; 59

    sei(); // Enable
 1b2:	78 94       	sei
 1b4:	08 95       	ret

000001b6 <updateScreenBuffer>:
 * individual digits. Then it fills the screen buffers for each digit with the corresponding encoded segment values.
 *
 * @param number An number to be displayed on the the 7 segment displays.
 */
void updateScreenBuffer( uint16_t number )
{
 1b6:	ac 01       	movw	r20, r24
    screenBufferIndex = 0; // The buffer for the least significant digit.
 1b8:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <screenBufferIndex>

    while( number ){ // While there are digits left to process.
 1bc:	89 2b       	or	r24, r25
 1be:	09 f4       	brne	.+2      	; 0x1c2 <updateScreenBuffer+0xc>
 1c0:	57 c0       	rjmp	.+174    	; 0x270 <updateScreenBuffer+0xba>
        uint8_t digit = number % 10; // Get the least significant digit.
 1c2:	9a 01       	movw	r18, r20
 1c4:	ad ec       	ldi	r26, 0xCD	; 205
 1c6:	bc ec       	ldi	r27, 0xCC	; 204
 1c8:	0e 94 92 01 	call	0x324	; 0x324 <__umulhisi3>
 1cc:	fc 01       	movw	r30, r24
 1ce:	f6 95       	lsr	r31
 1d0:	e7 95       	ror	r30
 1d2:	f6 95       	lsr	r31
 1d4:	e7 95       	ror	r30
 1d6:	f6 95       	lsr	r31
 1d8:	e7 95       	ror	r30
 1da:	cf 01       	movw	r24, r30
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	ee 0f       	add	r30, r30
 1e2:	ff 1f       	adc	r31, r31
 1e4:	ee 0f       	add	r30, r30
 1e6:	ff 1f       	adc	r31, r31
 1e8:	ee 0f       	add	r30, r30
 1ea:	ff 1f       	adc	r31, r31
 1ec:	e8 0f       	add	r30, r24
 1ee:	f9 1f       	adc	r31, r25
 1f0:	ca 01       	movw	r24, r20
 1f2:	8e 1b       	sub	r24, r30
 1f4:	9f 0b       	sbc	r25, r31
 1f6:	fc 01       	movw	r30, r24
        number /=10; // Throw away the least significant digit and move the the next.
 1f8:	0e 94 92 01 	call	0x324	; 0x324 <__umulhisi3>
 1fc:	ac 01       	movw	r20, r24
 1fe:	56 95       	lsr	r21
 200:	47 95       	ror	r20
 202:	56 95       	lsr	r21
 204:	47 95       	ror	r20
 206:	56 95       	lsr	r21
 208:	47 95       	ror	r20
        for ( int i = 0; i<7; ++i ) { // Load 7 single segment values for the digit into the screen buffer.
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	30 e0       	ldi	r19, 0x00	; 0
            if( screenBuffer[screenBufferIndex][i] != displayEncodedNumbers[digit][i] ) {
 20e:	ff 27       	eor	r31, r31
 210:	bf 01       	movw	r22, r30
 212:	66 0f       	add	r22, r22
 214:	77 1f       	adc	r23, r23
 216:	66 0f       	add	r22, r22
 218:	77 1f       	adc	r23, r23
 21a:	66 0f       	add	r22, r22
 21c:	77 1f       	adc	r23, r23
 21e:	6e 1b       	sub	r22, r30
 220:	7f 0b       	sbc	r23, r31
 222:	60 5a       	subi	r22, 0xA0	; 160
 224:	7f 4f       	sbci	r23, 0xFF	; 255
 226:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <screenBufferIndex>
 22a:	f9 01       	movw	r30, r18
 22c:	97 e0       	ldi	r25, 0x07	; 7
 22e:	89 9f       	mul	r24, r25
 230:	e0 0d       	add	r30, r0
 232:	f1 1d       	adc	r31, r1
 234:	11 24       	eor	r1, r1
 236:	ea 55       	subi	r30, 0x5A	; 90
 238:	ff 4f       	sbci	r31, 0xFF	; 255
 23a:	90 81       	ld	r25, Z
 23c:	fb 01       	movw	r30, r22
 23e:	e2 0f       	add	r30, r18
 240:	f3 1f       	adc	r31, r19
 242:	80 81       	ld	r24, Z
 244:	98 17       	cp	r25, r24
 246:	59 f0       	breq	.+22     	; 0x25e <updateScreenBuffer+0xa8>
               screenBuffer[screenBufferIndex][i] = displayEncodedNumbers[digit][i];
 248:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <screenBufferIndex>
 24c:	f9 01       	movw	r30, r18
 24e:	a7 e0       	ldi	r26, 0x07	; 7
 250:	9a 9f       	mul	r25, r26
 252:	e0 0d       	add	r30, r0
 254:	f1 1d       	adc	r31, r1
 256:	11 24       	eor	r1, r1
 258:	ea 55       	subi	r30, 0x5A	; 90
 25a:	ff 4f       	sbci	r31, 0xFF	; 255
 25c:	80 83       	st	Z, r24
    screenBufferIndex = 0; // The buffer for the least significant digit.

    while( number ){ // While there are digits left to process.
        uint8_t digit = number % 10; // Get the least significant digit.
        number /=10; // Throw away the least significant digit and move the the next.
        for ( int i = 0; i<7; ++i ) { // Load 7 single segment values for the digit into the screen buffer.
 25e:	2f 5f       	subi	r18, 0xFF	; 255
 260:	3f 4f       	sbci	r19, 0xFF	; 255
 262:	27 30       	cpi	r18, 0x07	; 7
 264:	31 05       	cpc	r19, r1
 266:	f9 f6       	brne	.-66     	; 0x226 <updateScreenBuffer+0x70>
 */
void updateScreenBuffer( uint16_t number )
{
    screenBufferIndex = 0; // The buffer for the least significant digit.

    while( number ){ // While there are digits left to process.
 268:	41 15       	cp	r20, r1
 26a:	51 05       	cpc	r21, r1
 26c:	09 f0       	breq	.+2      	; 0x270 <updateScreenBuffer+0xba>
 26e:	a9 cf       	rjmp	.-174    	; 0x1c2 <updateScreenBuffer+0xc>
               screenBuffer[screenBufferIndex][i] = displayEncodedNumbers[digit][i];
            }
        }
    }

    while( screenBufferIndex < 4 ){ // Fill remaining buffers with 0xff so the segments turn off.
 270:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <screenBufferIndex>
 274:	84 30       	cpi	r24, 0x04	; 4
 276:	38 f1       	brcs	.+78     	; 0x2c6 <updateScreenBuffer+0x110>
 278:	08 95       	ret
        for ( int i = 0; i<7; ++i ) { // Load 7 segment segment off commands into buffer.
            if( screenBuffer[screenBufferIndex][i] != 0xFF ) {
 27a:	20 91 c3 00 	lds	r18, 0x00C3	; 0x8000c3 <screenBufferIndex>
 27e:	fc 01       	movw	r30, r24
 280:	47 e0       	ldi	r20, 0x07	; 7
 282:	24 9f       	mul	r18, r20
 284:	e0 0d       	add	r30, r0
 286:	f1 1d       	adc	r31, r1
 288:	11 24       	eor	r1, r1
 28a:	ea 55       	subi	r30, 0x5A	; 90
 28c:	ff 4f       	sbci	r31, 0xFF	; 255
 28e:	20 81       	ld	r18, Z
 290:	2f 3f       	cpi	r18, 0xFF	; 255
 292:	59 f0       	breq	.+22     	; 0x2aa <updateScreenBuffer+0xf4>
                screenBuffer[screenBufferIndex][i]  = 0xFF;
 294:	20 91 c3 00 	lds	r18, 0x00C3	; 0x8000c3 <screenBufferIndex>
 298:	fc 01       	movw	r30, r24
 29a:	a7 e0       	ldi	r26, 0x07	; 7
 29c:	2a 9f       	mul	r18, r26
 29e:	e0 0d       	add	r30, r0
 2a0:	f1 1d       	adc	r31, r1
 2a2:	11 24       	eor	r1, r1
 2a4:	ea 55       	subi	r30, 0x5A	; 90
 2a6:	ff 4f       	sbci	r31, 0xFF	; 255
 2a8:	30 83       	st	Z, r19
            }
        }
    }

    while( screenBufferIndex < 4 ){ // Fill remaining buffers with 0xff so the segments turn off.
        for ( int i = 0; i<7; ++i ) { // Load 7 segment segment off commands into buffer.
 2aa:	01 96       	adiw	r24, 0x01	; 1
 2ac:	87 30       	cpi	r24, 0x07	; 7
 2ae:	91 05       	cpc	r25, r1
 2b0:	21 f7       	brne	.-56     	; 0x27a <updateScreenBuffer+0xc4>
            if( screenBuffer[screenBufferIndex][i] != 0xFF ) {
                screenBuffer[screenBufferIndex][i]  = 0xFF;
            }
        }
        screenBufferIndex++;
 2b2:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <screenBufferIndex>
 2b6:	8f 5f       	subi	r24, 0xFF	; 255
 2b8:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <screenBufferIndex>
               screenBuffer[screenBufferIndex][i] = displayEncodedNumbers[digit][i];
            }
        }
    }

    while( screenBufferIndex < 4 ){ // Fill remaining buffers with 0xff so the segments turn off.
 2bc:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <screenBufferIndex>
 2c0:	84 30       	cpi	r24, 0x04	; 4
 2c2:	10 f0       	brcs	.+4      	; 0x2c8 <updateScreenBuffer+0x112>
 2c4:	08 95       	ret
        for ( int i = 0; i<7; ++i ) { // Load 7 segment segment off commands into buffer.
            if( screenBuffer[screenBufferIndex][i] != 0xFF ) {
                screenBuffer[screenBufferIndex][i]  = 0xFF;
 2c6:	3f ef       	ldi	r19, 0xFF	; 255
    screenBufferIndex = 0; // The buffer for the least significant digit.

    while( number ){ // While there are digits left to process.
        uint8_t digit = number % 10; // Get the least significant digit.
        number /=10; // Throw away the least significant digit and move the the next.
        for ( int i = 0; i<7; ++i ) { // Load 7 single segment values for the digit into the screen buffer.
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	d6 cf       	rjmp	.-84     	; 0x27a <updateScreenBuffer+0xc4>

000002ce <main>:
void initiateTimers();
void initInterrupts();
void updateScreenBuffer( uint16_t number );

int main(){
    initIoRegisters();
 2ce:	0e 94 c1 00 	call	0x182	; 0x182 <initIoRegisters>
    initiateTimers();
 2d2:	0e 94 ca 00 	call	0x194	; 0x194 <initiateTimers>
    initInterrupts();
 2d6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <initInterrupts>

    while(1){
        updateScreenBuffer(10);
 2da:	8a e0       	ldi	r24, 0x0A	; 10
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 db 00 	call	0x1b6	; 0x1b6 <updateScreenBuffer>
        //asm volatile ("nop"); // Do nothing , No Operation
        if( timerOverflowCount - lastCalculationTime > 7 ){ //  Overflow occurs at 15.259 Hz so 7 ~ 0.5 s
 2e2:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <timerOverflowCount>
 2e6:	90 91 ca 00 	lds	r25, 0x00CA	; 0x8000ca <timerOverflowCount+0x1>
 2ea:	20 91 c4 00 	lds	r18, 0x00C4	; 0x8000c4 <lastCalculationTime>
 2ee:	30 91 c5 00 	lds	r19, 0x00C5	; 0x8000c5 <lastCalculationTime+0x1>
 2f2:	82 1b       	sub	r24, r18
 2f4:	93 0b       	sbc	r25, r19
 2f6:	08 97       	sbiw	r24, 0x08	; 8
 2f8:	80 f3       	brcs	.-32     	; 0x2da <main+0xc>
            lastCalculationTime = timerOverflowCount;
 2fa:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <timerOverflowCount>
 2fe:	90 91 ca 00 	lds	r25, 0x00CA	; 0x8000ca <timerOverflowCount+0x1>
 302:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <lastCalculationTime+0x1>
 306:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <lastCalculationTime>

            uint16_t overflows = timerOverflowCount - lastPulseOverflowCount; // Get amount of overflows since last pulse.
 30a:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <timerOverflowCount>
 30e:	90 91 ca 00 	lds	r25, 0x00CA	; 0x8000ca <timerOverflowCount+0x1>
 312:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <lastPulseOverflowCount>
            uint16_t microSeconds = TCNT1 - lastPulseMicrosecondsCount; // Get remaining microseconds since last pulse.
 316:	8c b5       	in	r24, 0x2c	; 44
 318:	9d b5       	in	r25, 0x2d	; 45
 31a:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <lastPulseMicrosecondsCount>
 31e:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <lastPulseMicrosecondsCount+0x1>
 322:	db cf       	rjmp	.-74     	; 0x2da <main+0xc>

00000324 <__umulhisi3>:
 324:	a2 9f       	mul	r26, r18
 326:	b0 01       	movw	r22, r0
 328:	b3 9f       	mul	r27, r19
 32a:	c0 01       	movw	r24, r0
 32c:	a3 9f       	mul	r26, r19
 32e:	70 0d       	add	r23, r0
 330:	81 1d       	adc	r24, r1
 332:	11 24       	eor	r1, r1
 334:	91 1d       	adc	r25, r1
 336:	b2 9f       	mul	r27, r18
 338:	70 0d       	add	r23, r0
 33a:	81 1d       	adc	r24, r1
 33c:	11 24       	eor	r1, r1
 33e:	91 1d       	adc	r25, r1
 340:	08 95       	ret

00000342 <_exit>:
 342:	f8 94       	cli

00000344 <__stop_program>:
 344:	ff cf       	rjmp	.-2      	; 0x344 <__stop_program>
